{"version":3,"sources":["Wok.js"],"names":["JSON","Wok","config","this","pluginClass","pluginPrefix","key","pipes","plugins","debug","Function","prototype","bind","context","__method","__arguments","slice","call","arguments","length","args","concat","apply","use","name","plugin","originalName","Error","init","element","elements","querySelectorAll","i","_initPlugin","requestImmediately","renderImmediately","pluginControls","attr","getAttribute","trim","split","input","shift","output","stage","render","displayName","request","register","inputName","undefined","outputName","parse","join","unshift","className","_getPipe","pipeName","source","destinations","_getStage","inputPipeName","outputPipeName","result","wok","subscribe","provide","replace","destination","push","Array","console","window"],"mappings":"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","file":"Wok.min.js","sourcesContent":["(function(JSON) {\n\t'use strict';\n\n\tif(!Function.prototype.bind) {\n\t\tFunction.prototype.bind = function bind(context) {\n\t\t\tvar __method = this;\n\t\t\tvar __arguments = [].slice.call(arguments).slice(bind.length);\n\t\t\treturn function() {\n\t\t\t\tvar args = __arguments.concat([].slice.call(arguments));\n\t\t\t\treturn __method.apply(context, args);\n\t\t\t};\n\t\t};\n\t}\n\n\tfunction Wok(config) {\n\t\tthis.config = {\n\t\t\tpluginClass: 'wok-',\n\t\t\tpluginPrefix: 'wok-'\n\t\t};\n\t\tfor(var key in config) {\n\t\t\tthis.config[key] = config[key];\n\t\t}\n\n\t\tthis.pipes = {};\n\n\t\tthis.plugins = {};\n\n\t\tthis.debug = false;\n\t}\n\n\tWok.prototype.use = function(name, plugin) {\n\t\tvar originalName = name;\n\t\tif(!plugin) {\n\t\t\tplugin = Wok.plugins[name];\n\t\t}\n\t\tif(typeof plugin === 'string') {\n\t\t\toriginalName = plugin;\n\t\t\tplugin = this.plugins[plugin];\n\t\t}\n\t\tif(!plugin) {\n\t\t\tthrow new Error('Plugin '+originalName+' not known to Wok.');\n\t\t}\n\t\tthis.plugins[name] = plugin;\n\t};\n\n\tWok.prototype.init = function(element) {\n\t\tfor(var name in this.plugins) {\n\t\t\tvar plugin = this.plugins[name];\n\t\t\tvar elements = element.querySelectorAll('[data-'+this.config.pluginPrefix+name+']');\n\t\t\tfor(var i=0;i<elements.length;i++) {\n\t\t\t\t// Fixme: init input-only plugins before in-out,\n\t\t\t\t// and these before output plugins, instead of using DOM order.\n\t\t\t\tthis._initPlugin(plugin, name, elements[i]);\n\t\t\t}\n\t\t}\n\t};\n\n\tWok.prototype._initPlugin = function(plugin, name, element) {\n\t\t// jshint maxstatements: false\n\t\tvar attr = (element.getAttribute('data-'+this.config.pluginPrefix+name)||'').trim().split('/');\n\t\tvar input = attr.shift();\n\t\tvar output = attr.shift();\n\n\t\tvar requestImmediately, renderImmediately;\n\n\t\tvar pluginControls;\n\t\tvar stage = {};\n\t\tif(input) {\n\t\t\tstage.input = [input, function() {\n\t\t\t\tif(!pluginControls) {\n\t\t\t\t\t// TODO: Is this correct. It works. But is the logic sound?\n\t\t\t\t\trequestImmediately = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn pluginControls.render.apply(this, arguments);\n\t\t\t}];\n\t\t\t// Set the input function’s display name to make debugging easier\n\t\t\tstage.input[1].displayName = name+'/'+input+'/input';\n\t\t}\n\t\tif(output) {\n\t\t\tstage.output = [output, function() {\n\t\t\t\tif(!pluginControls) {\n\t\t\t\t\t// TODO: Is this correct. It works. But is the logic sound?\n\t\t\t\t\trenderImmediately = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn pluginControls.request.apply(this, arguments);\n\t\t\t}];\n\t\t\t// Set the output function’s display name to make debugging easier\n\t\t\tstage.output[1].displayName = name+'/'+output+'/output';\n\t\t}\n\n\t\tstage = this.register(stage);\n\t\tstage.inputName = input || undefined;\n\t\tstage.outputName = output || undefined;\n\t\tvar args = JSON.parse('['+attr.join('/')+']');\n\t\targs.unshift(element);\n\t\tpluginControls = plugin.apply(stage, args);\n\n\t\tif(!pluginControls) {\n\t\t\tthrow new Error('Wok plugin '+name+' did not return controls');\n\t\t}\n\n\t\tif(pluginControls.request === true) {\n\t\t\trequestImmediately = true;\n\t\t\tdelete pluginControls.request;\n\t\t}\n\t\tif(pluginControls.render === true) {\n\t\t\trenderImmediately = true;\n\t\t\tdelete pluginControls.render;\n\t\t}\n\n\t\t// Sanity-check pluginControls\n\t\tif(input && !('render' in pluginControls)) {\n\t\t\tthrow new Error('Wok plugin “'+name+'” not meant to be used with input pipes');\n\t\t}\n\t\tif(output && !('request' in pluginControls)) {\n\t\t\tthrow new Error('Wok plugin “'+name+'” not meant to be used with output pipes');\n\t\t}\n\n\t\tif(requestImmediately) {\n\t\t\tstage.request();\n\t\t}\n\t\tif(renderImmediately) {\n\t\t\tstage.render();\n\t\t}\n\n\t\tif(this.config.pluginClass !== null) {\n\t\t\telement.className += ' '+this.config.pluginClass+name;\n\t\t}\n\t};\n\n\t/**\n\t * Returns the complete defintion of a pipe\n\t */\n\tWok.prototype._getPipe = function(pipeName) {\n\t\tif(!(pipeName in this.pipes)) {\n\t\t\tthis.pipes[pipeName] = {\n\t\t\t\tsource: null,\n\t\t\t\tdestinations: []\n\t\t\t};\n\t\t}\n\t\treturn this.pipes[pipeName];\n\t};\n\n\t/**\n\t * Returns the complete defintion of a stage.\n\t */\n\tWok.prototype._getStage = function(inputPipeName, outputPipeName) {\n\t\tvar result = {};\n\t\tif(inputPipeName) {\n\t\t\tresult.request = this.request.bind(this, inputPipeName);\n\t\t}\n\t\tif(outputPipeName) {\n\t\t\tresult.render = this.render.bind(this, outputPipeName);\n\t\t}\n\t\tresult.wok = this;\n\t\treturn result;\n\t};\n\n\t/**\n\t * Registers a stage with the specified input and output pipes\n\t */\n\tWok.prototype.register = function(stage) {\n\t\tvar inputPipeName, outputPipeName;\n\t\tif('input' in stage) {\n\t\t\tinputPipeName = stage.input[0];\n\t\t\tthis.subscribe(inputPipeName, stage.input[1]);\n\t\t}\n\t\tif('output' in stage) {\n\t\t\toutputPipeName = stage.output[0];\n\t\t\tthis.provide(outputPipeName, stage.output[1]);\n\t\t}\n\t\treturn this._getStage(inputPipeName, outputPipeName);\n\t};\n\n\t/**\n\t * The most fundamental part of a Wok.js pipe is the provider,\n\t * the function that listens to request on a pipe (and hopefully responds with `wok.render`).\n\t * There is only one provider per pipe.\n\t * @param provider will be the function that is called whenever the configuration for this pipe changes and\n\t *                 indicates to the source that it should call `wok.render` with updated data.\n\t * @param replace If you want to call `wok.provide` multiple times for the same pipe in\n\t *                order to replace the previous provider, set the this to `true`.\n\t */\n\tWok.prototype.provide = function(pipeName, source, replace) {\n\t\tvar wok = this._getPipe(pipeName);\n\t\tif(wok.source && !replace) {\n\t\t\tthrow new Error('Cannot replace defined pipe “'+pipeName+'”’s source');\n\t\t}\n\t\twok.source = source;\n\t};\n\n\t/**\n\t * Use `wok.subscribe` to register a function that displays data.\n\t * Whenever a pipe gets rendered, the `subscriber` gets called with the updated data.\n\t * The idea is for the subscriber to either display the data or pass a modified version on to a different pipe.\n\t */\n\tWok.prototype.subscribe = function(pipeName, destination) {\n\t\tvar wok = this._getPipe(pipeName);\n\t\twok.destinations.push(destination);\n\t};\n\n\t/**\n\t * Renders a pipe by updating all its destinations\n\t */\n\tWok.prototype.render = function(pipeName, data) {\n\t\t// jshint unused: false\n\t\tvar wok = this._getPipe(pipeName);\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\tif(this.debug) {\n\t\t\tconsole.debug('Wok rendering '+pipeName+'', args, wok.destinations);\n\t\t}\n\t\tfor(var i=0;i<wok.destinations.length;i++) {\n\t\t\twok.destinations[i].apply(this, args);\n\t\t}\n\t};\n\n\t/**\n\t * Requests data from a pipe. Configuration options are passed along to the source\n\t */\n\tWok.prototype.request = function(pipeName, options) {\n\t\t// jshint unused: false\n\t\tvar wok = this._getPipe(pipeName);\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\tif(this.debug) {\n\t\t\tconsole.debug('Wok requesting '+pipeName+'', args, wok.source);\n\t\t}\n\t\treturn wok.source.apply(this, args);\n\t};\n\n\tWok.plugins = {};\n\n\twindow.Wok = Wok;\n})(window.JSON);\n"],"sourceRoot":"/source/"}